// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.16;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        _transferOwnership(_msgSender());
    }
    modifier onlyOwner() {
        _checkOwner();
        _;
    }
    function owner() public view virtual returns (address) {
        return _owner;
    }
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract game is Context, Ownable {
    uint public FEE=10;
    uint private valueGamer;
    uint maxChoiceNumberSPS = 2;
    uint durationSPS = 600;
    uint count;
    uint public withdrawFunds;

    mapping (address=>uint) balances;

    mapping (uint=>gameNumber) public SPS;

    struct gameNumber {
        uint startsAt;
        uint endsAt;
        address winner;
        bool withrawPriseStopped;
        uint playersCount;
        uint bidValue; // first pay 10 (5 - for game, 5 - collateral),  second pay 5
        address first;
        address second;
        bytes32 firtstHashedChoice;
        uint firstChoice;     // 0 - stone, 1 - scissors, 2 -paper
        uint secondChoice; // 0 - stone, 1 - scissors, 2 -paper
        }

    error ValueNotEven();
    modifier onlyEvenValue(uint _amount) {
            valueGamer = _amount / 2;
            if ((2 * valueGamer) != _amount)
                revert ValueNotEven();
            _;
        }

    event gameStart (uint indexed gameNumber,uint indexed startsAt,uint indexed endsAt,uint gameValue);
    event gameEnd (uint indexed gameNumber, address indexed winner);
    event SomeoneMakeBid (uint indexed numberGame);

    function startGameSPS (uint _amount, bytes32 _hashedChoice) external onlyEvenValue(_amount) {
        require(_amount<= _getBalanceAcc() && _amount!=0 ,"Not enough funds!");
        balances[_msgSender()]-=_amount;
        count++;
        SPS[count].first=_msgSender();
        SPS[count].firtstHashedChoice=_hashedChoice;
        SPS[count].startsAt = block.timestamp;
        SPS[count].endsAt = block.timestamp+durationSPS;
        SPS[count].playersCount++;
        SPS[count].bidValue=_amount/2;
        emit gameStart (count, SPS[count].startsAt, SPS[count].endsAt, SPS[count].bidValue);
        }

    function abort (uint _count) external  {
        require(block.timestamp>SPS[_count].endsAt, "Wait until game ends!");
        require (_msgSender()==SPS[_count].first
        || _msgSender()==SPS[_count].second, "You not player!");
        if (_msgSender()==SPS[_count].first) {
            require (SPS[_count].second==address(0), 
            "You must reveal choice!");
            require(!SPS[_count].withrawPriseStopped, "Prise received or stopped!");
            SPS[_count].withrawPriseStopped=true;
            balances[_msgSender()]+=SPS[_count].bidValue*2;
            emit gameEnd(_count, SPS[_count].winner);
            }
        if (_msgSender()==SPS[_count].second) {
            require (block.timestamp>SPS[_count].endsAt+3 hours,
            "Wait for reveal choice 3 hours!");
            require(!SPS[_count].withrawPriseStopped, "Prise received or stopped!");
            SPS[_count].withrawPriseStopped=true;
            balances[_msgSender()]+=SPS[_count].bidValue;
            emit gameEnd(_count, SPS[_count].winner);
            }    
        } 

    function makeChoiceSPS (uint _count, uint _amount, uint _choice)
    external {
        require(!SPS[_count].withrawPriseStopped, "Prise received or stopped!");
        require(_amount<=_getBalanceAcc(),"Not enough funds!");
        require(_choice<=maxChoiceNumberSPS, "Wrong choice number!");
        require(block.timestamp<SPS[_count].endsAt, "Game over!");
        require(_amount==SPS[_count].bidValue, "Wrong bid value!");
        require (SPS[_count].second==address(0), "Someone already play!");
        balances[_msgSender()]-=_amount;
        SPS[_count].second=_msgSender();
        SPS[_count].secondChoice=_choice;
        SPS[_count].playersCount++;
        emit SomeoneMakeBid (_count);
        }
    
    function revealChoice (uint _count, uint _choice, string calldata _secret) external {
        require(!SPS[_count].withrawPriseStopped, "Prise received or stopped!");
        require(SPS[_count].second!=address(0), "Missing opponent!");
        require(_choice<=maxChoiceNumberSPS, "Wrong choice number!");
        bytes32 commit=keccak256(abi.encode(_choice, _secret, _msgSender()));
        require(commit==SPS[_count].firtstHashedChoice, "You can't change choice!");
        SPS[_count].withrawPriseStopped=true;
        SPS[_count].firstChoice=_choice;
        if (SPS[_count].firstChoice==SPS[_count].secondChoice) {
            balances[_msgSender()]+=SPS[_count].bidValue*2;
            balances[SPS[count].second]+=SPS[_count].bidValue;
            emit gameEnd(_count, SPS[_count].winner);
        }
        if (SPS[_count].firstChoice==0
        && SPS[_count].secondChoice==1 
        || SPS[_count].firstChoice==1
        && SPS[_count].secondChoice==2
        || SPS[_count].firstChoice==2
        && SPS[_count].secondChoice==0
        ){
            SPS[_count].winner=SPS[_count].first;
            uint ownerAmount=SPS[_count].bidValue*2/100*FEE;
            balances[SPS[_count].winner]+=SPS[_count].bidValue*3-ownerAmount;
            withdrawFunds+=ownerAmount;
            emit gameEnd(_count, SPS[_count].winner);
            }
        if (SPS[_count].firstChoice==1
        && SPS[_count].secondChoice==0
        || SPS[_count].firstChoice==0
        && SPS[_count].secondChoice==2
        || SPS[_count].firstChoice==2
        && SPS[_count].secondChoice==1
        ){
            SPS[_count].winner=SPS[_count].second;
            uint ownerAmount=SPS[_count].bidValue*2/100*FEE;
            balances[SPS[_count].winner]+=SPS[_count].bidValue*2-ownerAmount;
            withdrawFunds+=ownerAmount;
            emit gameEnd(_count, SPS[_count].winner);
            }
        } 

    function getWinner (uint _count) public view returns(address) {
        return SPS[_count].winner;
        }
        
    function getBalance () public view returns (uint) {
        return address(this).balance;
        }

    function _getBalanceAcc () public view returns(uint){
        return balances[_msgSender()];
        }

    function wihdrawBalance () external {
        uint amount =  balances[_msgSender()];
        balances[_msgSender()] -= amount;
        payable(_msgSender()).transfer(amount);
        }

    function withdraw () external onlyOwner {
        uint _amount = withdrawFunds;
        withdrawFunds -= _amount;
        payable(_msgSender()).transfer(_amount);
        }

    function addBalance () external payable onlyEvenValue(msg.value){
        balances[_msgSender()] += msg.value;
        }

}
